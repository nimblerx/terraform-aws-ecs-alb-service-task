name: terraform-aws-ecs-alb-service-task
license: APACHE2
github_repo: cloudposse/terraform-aws-ecs-alb-service-task
badges:
  - name: Latest Release
    image: https://img.shields.io/github/release/cloudposse/terraform-aws-ecs-alb-service-task.svg?style=for-the-badge
    url: https://github.com/cloudposse/terraform-aws-ecs-alb-service-task/releases/latest
  - name: Last Updated
    image: https://img.shields.io/github/last-commit/cloudposse/terraform-aws-ecs-alb-service-task.svg?style=for-the-badge
    url: https://github.com/cloudposse/terraform-aws-ecs-alb-service-task/commits
  - name: Slack Community
    image: https://slack.cloudposse.com/for-the-badge.svg
    url: https://slack.cloudposse.com

# List any related terraform modules that this module may be used with or that this module depends on.
related:
  - name: terraform-aws-alb
    description: Terraform module to provision a standard ALB for HTTP/HTTP traffic
    url: https://github.com/cloudposse/terraform-aws-alb
  - name: terraform-aws-alb-ingress
    description: Terraform module to provision an HTTP style ingress rule based on hostname and path for an ALB
    url: https://github.com/cloudposse/terraform-aws-alb-ingress
  - name: terraform-aws-codebuild
    description: Terraform Module to easily leverage AWS CodeBuild for Continuous Integration
    url: https://github.com/cloudposse/terraform-aws-codebuild
  - name: terraform-aws-ecr
    description: Terraform Module to manage Docker Container Registries on AWS ECR
    url: https://github.com/cloudposse/terraform-aws-ecr
  - name: terraform-aws-ecs-web-app
    description: Terraform module that implements a web app on ECS and supporting AWS resources
    url: https://github.com/cloudposse/terraform-aws-ecs-web-app
  - name: terraform-aws-ecs-codepipeline
    description: Terraform Module for CI/CD with AWS Code Pipeline and Code Build for ECS
    url: https://github.com/cloudposse/terraform-aws-ecs-codepipeline
  - name: terraform-aws-ecs-cloudwatch-sns-alarms
    description: Terraform module to create CloudWatch Alarms on ECS Service level metrics
    url: https://github.com/cloudposse/terraform-aws-ecs-cloudwatch-sns-alarms
  - name: terraform-aws-ecs-container-definition
    description: Terraform module to generate well-formed JSON documents that are passed to the aws_ecs_task_definition Terraform resource
    url: https://github.com/cloudposse/terraform-aws-ecs-container-definition
  - name: terraform-aws-lb-s3-bucket
    description: Terraform module to provision an S3 bucket with built in IAM policy to allow AWS Load Balancers to ship access logs.
    url: https://github.com/cloudposse/terraform-aws-lb-s3-bucket
description: Terraform module to create an ECS Service for a web app (task), and an ALB target group to route requests.
usage: |2-

  For a complete example, see [examples/complete](examples/complete).

  For automated test of the complete example using `bats` and `Terratest`, see [test](test).

  ```hcl
  provider "aws" {
    region = var.region
  }

  module "label" {
    source     = "git::https://github.com/cloudposse/terraform-null-label.git?ref=tags/0.15.0"
    namespace  = var.namespace
    name       = var.name
    stage      = var.stage
    delimiter  = var.delimiter
    attributes = var.attributes
    tags       = var.tags
  }

  module "vpc" {
    source     = "git::https://github.com/cloudposse/terraform-aws-vpc.git?ref=tags/0.8.1"
    namespace  = var.namespace
    stage      = var.stage
    name       = var.name
    delimiter  = var.delimiter
    attributes = var.attributes
    cidr_block = var.vpc_cidr_block
    tags       = var.tags
  }

  module "subnets" {
    source               = "git::https://github.com/cloudposse/terraform-aws-dynamic-subnets.git?ref=tags/0.16.1"
    availability_zones   = var.availability_zones
    namespace            = var.namespace
    stage                = var.stage
    name                 = var.name
    attributes           = var.attributes
    delimiter            = var.delimiter
    vpc_id               = module.vpc.vpc_id
    igw_id               = module.vpc.igw_id
    cidr_block           = module.vpc.vpc_cidr_block
    nat_gateway_enabled  = true
    nat_instance_enabled = false
    tags                 = var.tags
  }

  resource "aws_ecs_cluster" "default" {
    name = module.label.id
    tags = module.label.tags
  }

  module "container_definition" {
    source                       = "git::https://github.com/cloudposse/terraform-aws-ecs-container-definition.git?ref=tags/0.21.0"
    container_name               = var.container_name
    container_image              = var.container_image
    container_memory             = var.container_memory
    container_memory_reservation = var.container_memory_reservation
    container_cpu                = var.container_cpu
    essential                    = var.container_essential
    readonly_root_filesystem     = var.container_readonly_root_filesystem
    environment                  = var.container_environment
    port_mappings                = var.container_port_mappings
    log_configuration            = var.container_log_configuration
  }

  module "ecs_alb_service_task" {
    source = "cloudposse/ecs-alb-service-task/aws"
    # Cloud Posse recommends pinning every module to a specific version
    # version = "x.x.x"
    namespace                          = var.namespace
    stage                              = var.stage
    name                               = var.name
    attributes                         = var.attributes
    delimiter                          = var.delimiter
    alb_security_group                 = module.vpc.vpc_default_security_group_id
    container_definition_json          = module.container_definition.json
    ecs_cluster_arn                    = aws_ecs_cluster.default.arn
    launch_type                        = var.ecs_launch_type
    vpc_id                             = module.vpc.vpc_id
    security_group_ids                 = [module.vpc.vpc_default_security_group_id]
    subnet_ids                         = module.subnets.public_subnet_ids
    tags                               = var.tags
    ignore_changes_task_definition     = var.ignore_changes_task_definition
    network_mode                       = var.network_mode
    assign_public_ip                   = var.assign_public_ip
    propagate_tags                     = var.propagate_tags
    health_check_grace_period_seconds  = var.health_check_grace_period_seconds
    deployment_minimum_healthy_percent = var.deployment_minimum_healthy_percent
    deployment_maximum_percent         = var.deployment_maximum_percent
    deployment_controller_type         = var.deployment_controller_type
    desired_count                      = var.desired_count
    task_memory                        = var.task_memory
    task_cpu                           = var.task_cpu
  }
  ```

  The `container_image` in the `container_definition` module is the Docker image used to start a container.

  The `container_definition` is a string of JSON-encoded container definitions. Normally, you would place only one container definition here as the example
  above demonstrates. However, there might be situations where more than one container per task is more appropriate such as optionally in
  [Fargate](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/application_architecture.html#application_architecture_fargate) or in other cases
  where sidecars may be required. With [cloudposse/terraform-aws-ecs-container-definition](https://github.com/cloudposse/terraform-aws-ecs-container-definition)
  multi-container task definitions can be created using:
  ```hcl
  module "ecs_alb_service_task" {
    ...
    container_definition_json = jsonencode([
      module.first_container.json_map_object,
      module.second_container.json_map_object,
    ])
    ...
  }
  ```
  Refer to the [multiple definitions](https://github.com/cloudposse/terraform-aws-ecs-container-definition/blob/master/examples/multiple_definitions/main.tf) example
  in cloudposse/terraform-aws-ecs-container-definition for details on defining multiple definitions.

  This string is passed directly to the Docker daemon. Images in the Docker Hub registry are available by default.
  Other repositories are specified with either `repository-url/image:tag` or `repository-url/image@digest`.
  Up to 255 letters (uppercase and lowercase), numbers, hyphens, underscores, colons, periods, forward slashes, and number signs are allowed.
  This parameter maps to Image in the Create a container section of the Docker Remote API and the IMAGE parameter of `docker run`.

  When a new task starts, the Amazon ECS container agent pulls the latest version of the specified image and tag for the container to use.
  However, subsequent updates to a repository image are not propagated to already running tasks.

  Images in Amazon ECR repositories can be specified by either using the full `registry/repository:tag` or `registry/repository@digest`.
  For example, `012345678910.dkr.ecr.<region-name>.amazonaws.com/<repository-name>:latest` or `012345678910.dkr.ecr.<region-name>.amazonaws.com/<repository-name>@sha256:94afd1f2e64d908bc90dbca0035a5b567EXAMPLE`.

  Images in official repositories on Docker Hub use a single name (for example, `ubuntu` or `mongo`).

  Images in other repositories on Docker Hub are qualified with an organization name (for example, `amazon/amazon-ecs-agent`).

  Images in other online repositories are qualified further by a domain name (for example, `quay.io/assemblyline/ubuntu`).

  For more info, see [Container Definition](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_ContainerDefinition.html).

  ### Special case

  Sometimes there is a need to add ignore_changes to service. The current approach is to copy the entire block. I propose to output the necessary variables to the output, and then add the appropriate block that will create the service with your code.

  ```hcl
  module "ecs_alb_service_task" {
    source = "cloudposse/ecs-alb-service-task/aws"
    # Cloud Posse recommends pinning every module to a specific version
    # version = "x.x.x"
    ...
    service_created = false
  }


  resource "aws_ecs_service" "custom_app_service" {
    name                               = module.ecs_alb_service_task.aws_ecs_service_obj["name"]
    task_definition                    = module.ecs_alb_service_task.aws_ecs_service_obj["task_definition"]
    desired_count                      = module.ecs_alb_service_task.aws_ecs_service_obj["desired_count"]
    deployment_maximum_percent         = module.ecs_alb_service_task.aws_ecs_service_obj["deployment_maximum_percent"]
    deployment_minimum_healthy_percent = module.ecs_alb_service_task.aws_ecs_service_obj["deployment_minimum_healthy_percent"]
    health_check_grace_period_seconds  = module.ecs_alb_service_task.aws_ecs_service_obj["health_check_grace_period_seconds"]
    launch_type                        = module.ecs_alb_service_task.aws_ecs_service_obj["launch_type"]
    platform_version                   = module.ecs_alb_service_task.aws_ecs_service_obj["platform_version"]
    scheduling_strategy                = module.ecs_alb_service_task.aws_ecs_service_obj["scheduling_strategy"]
    enable_ecs_managed_tags            = module.ecs_alb_service_task.aws_ecs_service_obj["enable_ecs_managed_tags"]
    iam_role                           = module.ecs_alb_service_task.aws_ecs_service_obj["iam_role"]
    wait_for_steady_state              = module.ecs_alb_service_task.aws_ecs_service_obj["wait_for_steady_state"]
    force_new_deployment               = module.ecs_alb_service_task.aws_ecs_service_obj["force_new_deployment"]
    enable_execute_command             = module.ecs_alb_service_task.aws_ecs_service_obj["enable_execute_command"]

    dynamic "capacity_provider_strategy" {
      for_each = module.ecs_alb_service_task.aws_ecs_service_obj["capacity_provider_strategies"]
      content {
        capacity_provider = capacity_provider_strategy.value.capacity_provider
        weight            = capacity_provider_strategy.value.weight
        base              = lookup(capacity_provider_strategy.value, "base", null)
      }
    }

    dynamic "service_registries" {
      for_each = module.ecs_alb_service_task.aws_ecs_service_obj["service_registries"]
      content {
        registry_arn   = service_registries.value.registry_arn
        port           = lookup(service_registries.value, "port", null)
        container_name = lookup(service_registries.value, "container_name", null)
        container_port = lookup(service_registries.value, "container_port", null)
      }
    }

    dynamic "ordered_placement_strategy" {
      for_each = module.ecs_alb_service_task.aws_ecs_service_obj["ordered_placement_strategy"]
      content {
        type  = ordered_placement_strategy.value.type
        field = lookup(ordered_placement_strategy.value, "field", null)
      }
    }

    dynamic "placement_constraints" {
      for_each = module.ecs_alb_service_task.aws_ecs_service_obj["service_placement_constraints"]
      content {
        type       = placement_constraints.value.type
        expression = lookup(placement_constraints.value, "expression", null)
      }
    }

    dynamic "load_balancer" {
      for_each = module.ecs_alb_service_task.aws_ecs_service_obj["ecs_load_balancers"]
      content {
        container_name   = load_balancer.value.container_name
        container_port   = load_balancer.value.container_port
        elb_name         = lookup(load_balancer.value, "elb_name", null)
        target_group_arn = lookup(load_balancer.value, "target_group_arn", null)
      }
    }

    cluster        = module.ecs_alb_service_task.aws_ecs_service_obj["cluster"]
    propagate_tags = module.ecs_alb_service_task.aws_ecs_service_obj["propagate_tags"]
    tags           = module.ecs_alb_service_task.aws_ecs_service_obj["tags"]

    deployment_controller {
      type = module.ecs_alb_service_task.aws_ecs_service_obj["deployment_controller_type"]
    }

    dynamic "network_configuration" {
      for_each = module.ecs_alb_service_task.aws_ecs_service_obj["network_mode"] == "awsvpc" ? ["true"] : []
      content {
        security_groups  = module.app_service.aws_ecs_service_obj["security_groups"]
        subnets          = module.app_service.aws_ecs_service_obj["subnets"]
        assign_public_ip = module.app_service.aws_ecs_service_obj["assign_public_ip"]
      }
    }

    lifecycle {
      ignore_changes = [ #example ignore changes, who required in CodeDeploy
        task_definition,
        load_balancer,
        network_configuration
      ]
    }
  }

  ```

include:
  - docs/targets.md
  - docs/terraform.md
contributors: []
